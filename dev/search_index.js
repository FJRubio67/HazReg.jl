var documenterSearchIndex = {"docs":
[{"location":"HazRegJulia/#HazReg.jl:-Parametric-Hazard-based-regression-models-for-survival-data","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"","category":"section"},{"location":"HazRegJulia/#Models","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Models","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The HazReg.jl Julia package implements the following parametric hazard-based regression models for (overall) survival data.","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"General Hazard (GH) model [1] [2].\nAccelerated Failure Time (AFT) model [3].\nProportional Hazards (PH) model [4].\nAccelerated Hazards (AH) model [5].","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"These models are fitted using the Julia package Optim (methods included: NelderMead() (NelderMead), \"N\" (Newton), \"LBFGS\" (LBFGS), \"CG\" (ConjugateGradient), \"GD\" (GradientDescent)). Thus, the user needs to specify the initial points and to check the convergence of the optimisation step, as usual.","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"A description of these hazard models is presented below as well as the available baseline hazards.","category":"page"},{"location":"HazRegJulia/#General-Hazard-model","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"General Hazard model","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The GH model is formulated in terms of the hazard structure ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"h(t alpha beta theta bf x) = h_0left(t  exptildebf x^topalpha thetaright) expbf x^topbeta","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"where bf xinmathbb R^p are the covariates that affect the hazard level; tildebf x in mathbb R^q are the covariates the affect the time level (typically tildebf x subset bf x); alpha in mathbb R^q and beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"This hazard structure leads to an identifiable model as long as the baseline hazard is not a hazard associated to a member of the Weibull family of distributions [1].","category":"page"},{"location":"HazRegJulia/#Accelerated-Failure-Time-(AFT)-model","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Accelerated Failure Time (AFT) model","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The AFT model is formulated in terms of the hazard structure ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"h(t beta theta bf x) = h_0left(t  expbf x^topbeta thetaright) expbf x^topbeta","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"where bf xinmathbb R^p are the available covariates; beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"HazRegJulia/#Proportional-Hazards-(PH)-model","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Proportional Hazards (PH) model","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The PH model is formulated in terms of the hazard structure ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"h(t beta theta bf x) = h_0left(t  thetaright) expbf x^topbeta","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"where bf xinmathbb R^p are the available covariates; beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"HazRegJulia/#Accelerated-Hazards-(AH)-model","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Accelerated Hazards (AH) model","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The AH model is formulated in terms of the hazard structure ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"h(t alpha theta tildebf x) = h_0left(t exptildebf x^topalpha thetaright) ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"where tildebf xinmathbb R^q are the available covariates; alpha in mathbb R^q are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"HazRegJulia/#Available-baseline-hazards","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Available baseline hazards","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"The current version of the HazReg.jl Julia package implements the following parametric baseline hazards for the models discussed in the previous section.","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"Power Generalised Weibull (PGW)   distribution.\nExponentiated Weibull (EW)   distribution.\nGeneralised Gamma (GenGamma) distribution.\nGamma (Gamma)   distribution.\nLognormal   (LogNormal) distribution.\nLog-logistic   (LogLogistic) distribution.\nWeibull (Weibull)   distribution. (only for AFT, PH, and AH models)","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"All positive parameters are transformed into the real line using a log link (reparameterisation).","category":"page"},{"location":"HazRegJulia/#Illustrative-example:-Julia-code","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Illustrative example: Julia code","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"In this example, we analyse the LeukSurv data set from the R package spBayesSurv. This data set contains information about the survival of acute myeloid leukemia in 1,043 patients.","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"For the GH model, we consider the hazard level covariates (bf x) age (standardised), sex, wbc (white blood cell count at diagnosis, standardised), and tpi (the Townsend score, standardised); and the time level covariates (bf x) age (standardised), wbc (white blood cell count at diagnosis, standardised), and tpi (the Townsend score, standardised). For the PH, AFT, and AH models, we consider the covariates age (standardised), sex, wbc (white blood cell count at diagnosis, standardised), and tpi (the Townsend score, standardised).","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"For illustration, we fit the 4 models with both (3-parameter) PGW and (2-parameter) LL baseline hazard. In addition, we fit the GH model with GenGamma, EW, LogNormal, LogLogistic, and Gamma baseline hazards. We compare these models in terms of AIC (BIC can be used as well). We summarise the best selected model with the available tools in this package.","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"See also: ","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"HazReg.jl Julia Package \nHazReg, for an R implementation.","category":"page"},{"location":"HazRegJulia/#Data-preparation","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Data preparation","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"\nusing Distributions\nusing Random\nusing StatsBase\nusing Optim\nusing LinearAlgebra\nusing SpecialFunctions\nusing ForwardDiff\nusing Statistics\n\n\nusing HazReg\nusing Plots\nusing PrettyTables\nusing DataFrames\nusing NamedArrays\nusing CSV\nusing Survival\n\n#= Data =#\ndf = CSV.File(joinpath(@__DIR__,\"..\",\"src\",\"assets\",\"LeukSurv.csv\"));\n\n#= Design matrix for hazard level effects =#\ndes = hcat( standardise(df.age), df.sex, standardise(df.wbc), standardise(df.tpi) );\n\n#= Design matrix for time level effects =#\ndes_t = hcat( standardise(df.age), standardise(df.wbc), standardise(df.tpi) );\n\n#= Vital status =#\nstatus = collect(Bool,(df.cens));\n\n#= Survival times =#\ntimes = df.time/365.25 ;","category":"page"},{"location":"HazRegJulia/#Model-fit-and-MLEs","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Model fit and MLEs","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"# PGWGH\nOPTPGWGH = GHMLE(init = fill(0.0, 3 + size(des_t)[2] + size(des)[2]), times = times,\n            status = status, hstr = \"GH\", dist = PowerGeneralizedWeibull, \n            des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n# PGWAFT\nOPTPGWAFT = GHMLE(init = fill(0.0, 3 + size(des)[2]), times = times, \n                  status = status, hstr = \"AFT\", dist = PowerGeneralizedWeibull, \n                  des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\n# PGWPH\nOPTPGWPH = GHMLE(init = fill(0.0, 3 +size(des)[2]), times = times, \n                 status = status, hstr = \"PH\", dist = PowerGeneralizedWeibull, \n                 des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\n# PGWAH\nOPTPGWAH = GHMLE(init = fill(0.0, 3 + size(des_t)[2] ), times = times, \n                 status = status, hstr = \"AH\", dist = PowerGeneralizedWeibull, \n                 des_t = des_t, des = nothing, method = NelderMead(), maxit = 1000)\n\n\n# LLGH\nOPTLLGH = GHMLE(init = fill(0.0, 2 + size(des_t)[2] + size(des)[2]), times = times,\n                status = status, hstr = \"GH\", dist = LogLogistic, \n                des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n# LLAFT\nOPTLLAFT = GHMLE(init = fill(0.0, 2 + size(des)[2]), times = times, \n                  status = status, hstr = \"AFT\", dist = LogLogistic, \n                  des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\n# LLPH\nOPTLLPH = GHMLE(init = fill(0.0, 2 + size(des)[2]), times = times, \n                status = status, hstr = \"PH\", dist = LogLogistic, \n                des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\n# LLAH\nOPTLLAH = GHMLE(init = fill(0.0, 2 + size(des_t)[2]), times = times, \n                status = status, hstr = \"AH\", dist = LogLogistic, \n                des = nothing, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n\n# EWGH\nOPTEWGH = GHMLE(init = fill(0.0, 3 + size(des_t)[2] + size(des)[2]), times = times, \n                status = status, hstr = \"GH\", dist = ExponentiatedWeibull, \n                des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n# GGGH\nOPTGGGH = GHMLE(init = fill(0.0, 3 + size(des_t)[2] + size(des)[2]), times = times,\n                status = status, hstr = \"GH\", dist = GeneralizedGamma,\n                des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n# LNGH\nOPTLNGH = GHMLE(init = fill(0.0, 2 + size(des_t)[2] + size(des)[2]), times = times, \n                status = status, hstr = \"GH\", dist = LogNormal, \n                des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\n# GGH\nOPTGGH = GHMLE(init = fill(0.0, 2 + size(des_t)[2] + size(des)[2]), times = times, \n               status = status, hstr = \"GH\", dist = Gamma, \n               des = des, des_t = des_t, method = Newton(), maxit = 1000)\n\n# MLEs in the original parameterisations\nMLEPGWGH = [exp(OPTPGWGH[1].minimizer[j]) for j in 1:3] \nappend!(MLEPGWGH, OPTPGWGH[1].minimizer[4:end]) \n\nMLEEWGH = [exp(OPTEWGH[1].minimizer[j]) for j in 1:3] \nappend!(MLEEWGH, OPTEWGH[1].minimizer[4:end]) \n\nMLEEWGH = [exp(OPTEWGH[1].minimizer[j]) for j in 1:3] \nappend!(MLEEWGH, OPTEWGH[1].minimizer[4:end]) \n\nMLEGGGH = [exp(OPTGGGH[1].minimizer[j]) for j in 1:3] \nappend!(MLEGGGH, OPTGGGH[1].minimizer[4:end]) \n\nMLEGGH = [exp(OPTGGH[1].minimizer[j]) for j in 1:2] \nappend!(MLEGGH, OPTGGH[1].minimizer[3:end]) \n\nMLELNGH = [exp(OPTLNGH[1].minimizer[1]), exp(OPTLNGH[1].minimizer[2]), OPTLNGH[1].minimizer[3:end]...]\n\nMLELLGH = [exp(OPTLLGH[1].minimizer[1]), exp(OPTLLGH[1].minimizer[2]), OPTLLGH[1].minimizer[3:end]...]\n\nMLES = hcat(MLEPGWGH, MLEEWGH, MLEGGGH, [MLEGGH[1], MLEGGH[2], nothing, MLEGGH[3:end]...],\n            [MLELNGH[1], MLELNGH[2], nothing, MLELNGH[3:end]...],[MLELLGH[1], MLELLGH[2], nothing, MLELLGH[3:end]...])\n\nMLES = DataFrame(MLES, :auto)\n \nrename!( MLES, [\"PGWGH\", \"EWGH\", \"GGGH\", \"GGH\", \"LNGH\", \"LLGH\"] )\n\n# MLEs for GH models\nprintln(MLES)","category":"page"},{"location":"HazRegJulia/#Model-Comparison","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Model Comparison","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"# AIC for models with PGW baseline hazard\nAICPGWGH = 2*OPTPGWGH[1].minimum + 2*length(OPTPGWGH[1].minimizer)\nAICPGWAFT = 2*OPTPGWAFT[1].minimum + 2*length(OPTPGWAFT[1].minimizer)\nAICPGWPH = 2*OPTPGWPH[1].minimum + 2*length(OPTPGWPH[1].minimizer)\nAICPGWAH = 2*OPTPGWAH[1].minimum + 2*length(OPTPGWAH[1].minimizer)\n\n# AICs for models with LL baseline hazard\nAICLLGH = 2*OPTLLGH[1].minimum + 2*length(OPTLLGH[1].minimizer)\nAICLLAFT = 2*OPTLLAFT[1].minimum + 2*length(OPTLLAFT[1].minimizer)\nAICLLPH = 2*OPTLLPH[1].minimum + 2*length(OPTLLPH[1].minimizer)\nAICLLAH = 2*OPTLLAH[1].minimum + 2*length(OPTLLAH[1].minimizer)\n\n# AICs for GH models with GG, EW, LN, and G hazards\nAICGGGH = 2*OPTGGGH[1].minimum + 2*length(OPTGGGH[1].minimizer)\nAICEWGH = 2*OPTEWGH[1].minimum + 2*length(OPTEWGH[1].minimizer)\nAICLNGH = 2*OPTLNGH[1].minimum + 2*length(OPTLNGH[1].minimizer)\nAICGGH = 2*OPTGGH[1].minimum + 2*length(OPTGGH[1].minimizer)\n\n\n\n# All AICs\nAICs = [AICPGWGH, AICPGWAFT, AICPGWPH, AICPGWAH,\n          AICLLGH, AICLLAFT, AICLLPH, AICLLAH,\n          AICGGGH, AICEWGH, AICLNGH, AICGGH]\n\nprintln(AICs)\n\n# Best model: LLGH\nargmin(AICs)","category":"page"},{"location":"HazRegJulia/#Baseline-hazards-for-GH-models","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Baseline hazards for GH models","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"# Fitted baseline hazard functions for GH models\nPGWGHhaz(t) = haz(PowerGeneralizedWeibull(MLEPGWGH[1], MLEPGWGH[2], MLEPGWGH[3]),t)\nEWGHhaz(t) = haz(ExponentiatedWeibull(MLEEWGH[1], MLEEWGH[2], MLEEWGH[3]),t)\nGGGHhaz(t) = haz(GeneralizedGamma(MLEGGGH[1], MLEGGGH[2], MLEGGGH[3]),t)\nGGHhaz(t) = haz(Gamma(MLEGGH[1], MLEGGH[2]),t)\nLNGHhaz(t::Float64) = haz(LogNormal(MLELNGH[1], MLELNGH[2]),t)\nLLGHhaz(t::Float64) = haz(LogLogistic(MLELLGH[1], MLELLGH[2]),t)\n\n# Note that the baseline hazards associated to the top models look similar\nplot(t -> PGWGHhaz(t),\n      xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n    xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\", ylims = (0,4))\n\nplot!(t -> EWGHhaz(t),\n   xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"blue\", ylims = (0,4), linestyle=:dash)\n\nplot!(t -> GGGHhaz(t),\n   xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"blue\", ylims = (0,4), linestyle=:dot)\n\nplot!(t -> GGHhaz(t),\n   xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"blue\", ylims = (0,4), linestyle=:dashdot)\n\nplot!(t -> LNGHhaz(t),\n      xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n    xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\", ylims = (0,4), linestyle=:dashdotdot)\n\nplot!(t -> LLGHhaz(t),\n    xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"red\", ylims = (0,4), linestyle=:solid)","category":"page"},{"location":"HazRegJulia/#Best-model-summaries","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"Best-model summaries","text":"","category":"section"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"# MLE in the original parameterisation\nMLE = MLELLGH\n\nprintln(MLE)\n\n# 95% Confidence intervals under the reparameterisation\nCI = ConfInt(FUN = OPTLLGH[2], MLE = OPTLLGH[1].minimizer, level = 0.95)\n\nCI = DataFrame(CI, :auto)\n \nrename!( CI, [\"Lower\", \"Upper\"] )\n\nprintln(CI)","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"# Fitted baseline hazard function\nplot(t -> LLGHhaz(t),\n    xlabel = \"Time (years)\", ylabel = \"Baseline Hazard\", title = \"Best Model\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"red\", ylims = (0,4), linestyle=:solid)\n\n# Average population survival function and KM estimator\n\nfunction pop_surv(t::Float64)\n  p0 = size(des_t)[2]\n  p1 = size(des)[2]\n  theta1 = MLE[1]\n  theta2 = MLE[2]\n  alpha = MLE[3:(2+p0)]\n  beta = MLE[(3+p0):(2+p0+p1)]\n  x_alpha = des_t * alpha\n  x_dif = des * beta - x_alpha\n  out = mean(exp.(-cumhaz.(LogLogistic(theta1, theta2), t*exp.(x_alpha)).* exp.(x_dif)))\n  return out\nend\n\n\n# Kaplan-Meier estimator \nkm_fit = fit(KaplanMeier, times, df.cens)\n\nktimes = sort(unique(times))\nksurvival_probs = km_fit.survival\n\n# Comparison\nplot(ktimes, ksurvival_probs,\n    xlabel = \"Time (years)\", ylabel = \"Population Survival\", title = \"Best Model\",\n  xlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \n  xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n  xguidefontsize=18, yguidefontsize=18, linewidth=3,\n  linecolor = \"gray\", ylims = (0,1), linestyle=:solid)\n\nplot!(t -> pop_surv(t),\n  xlabel = \"Time (years)\", ylabel = \"Population Survival\", title = \"Best Model\",\nxlims = (0.0001,maximum(times)),   xticks = 0:1:maximum(times), label = \"\", \nxtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\nxguidefontsize=18, yguidefontsize=18, linewidth=3,\nlinecolor = \"black\", ylims = (0,1), linestyle=:solid)","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"\n\n# Confidence intervals for the survival function based on a normal approximation\n# at specific time points t0\n\n# Hessian and asymptotic covariance matrix\nHESS = ForwardDiff.hessian(OPTLLGH[2], OPTLLGH[1].minimizer);\nSigma = inv(HESS);\n\n#= \nA \"hackish\" workaround to a bug in ForwardDiff, which may\nproduce non-symmetric hessian matrices.\nHere, I am replacing the lower diagonal of Sigma by its \nupper diagonal\n=#\nps = size(Sigma, 1)\nfor i in 1:ps-1\n    for j in i+1:ps\n        Sigma[i, j] = Sigma[j, i]\n    end\nend\n\n\n# Reparameterised MLE \nr_MLE = OPTLLGH[1].minimizer;\n\n\n# The function to obtain approximate CIs based on Monte Carlo simulations \n# from the asymptotic normal distribution of the MLEs\n# t0 : time where the confidence interval will be calculated\n# level : confidence level\n# nmc : number of Monte Carlo iterations\n\nfunction ConfIntSurv(t0::Float64, level::Float64, nmc::Int64)\n    p0 = size(des_t)[2]\n    p1 = size(des)[2]\n    mc = fill(0.0, nmc)\n    function S_par(par::Vector{Float64})\n        \n        outs = mean( exp.( - cumhaz.(LogLogistic(par[1], par[2]), t0.*exp.(des_t * par[3:(2+p0)])) .*\n                                        exp.( des * par[(3+p0):(2+p0+p1)].- des_t * par[3:(2+p0)])  )  )\n                                        return outs\n    end\n    \n    for i in 1:nmc\n      mv_normal = MvNormal(r_MLE, Sigma) \n      val = rand(mv_normal, 1)\n      val1 = [val[1],exp(val[2]),val[3:end]...]\n      mc[i] = S_par(val1)\n    end\n    \n    L = Statistics.quantile(mc,(1-level)*0.5)\n    U = Statistics.quantile(mc,(1+level)*0.5)\n    \n    M = S_par(MLE)\n    \n    return [L,M,U]\nend\n  \n\n\n# times for CIs calculations\ntimesCI = [1.0,2.5,5,7.5,10,12.5];\n\nCIS = zeros(length(timesCI), 4);\n\nfor k in 1:length(timesCI)\nCIS[k,:] = vcat(timesCI[k], ConfIntSurv(timesCI[k],0.95,10000))\nend\n\nCIS = DataFrame(CIS, :auto);\n \nrename!( CIS, [\"year\",\"lower\",\"population survival\",\"upper\"] );\n\nprintln(CIS)\n","category":"page"},{"location":"HazRegJulia/","page":"HazReg.jl: Parametric Hazard-based regression models for survival data","title":"HazReg.jl: Parametric Hazard-based regression models for survival data","text":"Y. Chen and N. Jewell. On a general class of semiparametric hazards regression models. Biometrika 88, 687–702 (2001).\n\n\n\nF. Rubio, L. Remontet, N. Jewell and A. Belot. On a general structure for hazard-based regression models: an application to population-based cancer research. Statistical Methods in Medical Research 28, 2404–2417 (2019).\n\n\n\nJ. Kalbfleisch and R. Prentice. The statistical analysis of failure time data (John Wiley & Sons, 2011).\n\n\n\nD. Cox. Regression models and life-tables. Journal of the Royal Statistical Society: Series B (Methodological) 34, 187–202 (1972).\n\n\n\nY. Chen and M. Wang. Analysis of accelerated hazards models. Journal of the American Statistical Association 95, 608–618 (2000).\n\n\n\n","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Y. Chen and N. Jewell. On a general class of semiparametric hazards regression models. Biometrika 88, 687–702 (2001).\n\n\n\nF. Rubio, L. Remontet, N. Jewell and A. Belot. On a general structure for hazard-based regression models: an application to population-based cancer research. Statistical Methods in Medical Research 28, 2404–2417 (2019).\n\n\n\nJ. Kalbfleisch and R. Prentice. The statistical analysis of failure time data (John Wiley & Sons, 2011).\n\n\n\nD. Cox. Regression models and life-tables. Journal of the Royal Statistical Society: Series B (Methodological) 34, 187–202 (1972).\n\n\n\nY. Chen and M. Wang. Analysis of accelerated hazards models. Journal of the American Statistical Association 95, 608–618 (2000).\n\n\n\nE. Stacy. A generalization of the gamma distribution. The Annals of Mathematical Statistics 33, 1187–1192 (1962).\n\n\n\nM. Nikulin and F. Haghighi. On the power generalized Weibull family: model for cancer censored data. Metron – International Journal of Statistics 67, 75–86 (2009).\n\n\n\n","category":"page"},{"location":"GenGamma/#Generalised-Gamma-Distribution","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"","category":"section"},{"location":"GenGamma/#The-Generalised-Gamma-Distribution","page":"Generalised Gamma Distribution","title":"The Generalised Gamma Distribution","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The Generalised Gamma (GG) distribution [6] is a three-parameter distribution with support on mathbb R_+. The corresponding hazard function can accommodate bathtub, unimodal and monotone (increasing and decreasing) hazard shapes. The GG distribution has become popular in survival analysis due to its flexibility. Other flexible distributions that can account for these hazard shapes are discussed in @rubio:2021 and @jones:2015. ","category":"page"},{"location":"GenGamma/#Probability-Density-Function","page":"Generalised Gamma Distribution","title":"Probability Density Function","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The pdf of the GG distribution is","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"f(tthetakappadelta) = dfracdeltaGammaleft(frackappadeltaright)theta^kappa  t^kappa-1e^-left(fractthetaright)^delta","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"where theta0 is a scale parameter, and kappadelta 0 are shape parameters.","category":"page"},{"location":"GenGamma/#Cumulative-Distribution-Function","page":"Generalised Gamma Distribution","title":"Cumulative Distribution Function","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The CDF of the GG distribution is","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"F(tthetakappadelta) = frac  gamma left( frackappadeltaleft(fractthetaright)^deltaright)Gammaleft(frackappadeltaright)","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"where where gamma (cdot ) denotes the lower incomplete gamma function. The survival function can be obtained using the relationship S(tthetakappadelta)=1-F(tthetakappadelta). An interesting relationship between the Gamma CDF (G(tthetakappa), scale theta and shape kappa) and the GG CDF is","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"F(tthetakappadelta) = Gleft(t^delta theta^delta frackappadeltaright)","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"This allows the implementation of the GG CDF using the Julia command Gamma.","category":"page"},{"location":"GenGamma/#Hazard-Function","page":"Generalised Gamma Distribution","title":"Hazard Function","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The hazard function of the GG distribution is","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"h(tthetakappadelta) = dfracf(tthetakappadelta)1-F(tthetakappadelta)","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The survival function can be obtained as S(tthetakappadelta)=1-F(tthetakappadelta), and the cumulative hazard function as H(tthetakappadelta) = -log S(tthetakappadelta), as usual. The connection of the GG CDF with the Gamma distribution allows for writing these functions in terms of the Julia command Gamma as shown in the following code.","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"The following Julia code shows the implementation of the pdf, survival function, hazard function, cumulative hazard function, quantile function, and random number generation associated to the Generalised Gamma distribution using the Julia package HazReg.jl. Some illustrative examples are also presented.","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"See also: ","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"HazReg.jl Julia Package \nThe Generalised Gamma Distribution","category":"page"},{"location":"GenGamma/#Required-packages","page":"Generalised Gamma Distribution","title":"Required packages","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"using Distributions\nusing Random\nusing Plots\nusing StatsBase\nusing SpecialFunctions\nusing HazReg","category":"page"},{"location":"GenGamma/#Examples","page":"Generalised Gamma Distribution","title":"Examples","text":"","category":"section"},{"location":"GenGamma/#Random-number-generation","page":"Generalised Gamma Distribution","title":"Random number generation","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"#= Fix the seed =#\nRandom.seed!(123)\n#= True values of the parameters =#\nD = GeneralizedGamma(1,3,2) # sigma, nu, gamma\n#= Simulation =#\nsim = rand(D,1000);","category":"page"},{"location":"GenGamma/#Some-plots","page":"Generalised Gamma Distribution","title":"Some plots","text":"","category":"section"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"#= Histogram and probability density function =#\nhistogram(sim, normalize=:pdf, color=:gray, \n          bins = range(0, 4, length=30), label = \"\")\nplot!(t -> pdf(D,t),\n      xlabel = \"x\", ylabel = \"Density\", title = \"GenGamma distribution\",\n    xlims = (0,4),   xticks = 0:1:4, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"#= Empirical CDF and CDF =#\n\n#= Empirical CDF=#\necdfsim = ecdf(sim)\n\nplot(x -> ecdfsim(x), 0, 5, label = \"ECDF\", linecolor = \"gray\", linewidth=3)\nplot!(t -> cdf(D,t),\n      xlabel = \"x\", ylabel = \"CDF vs. ECDF\", title = \"GenGamma distribution\",\n      xlims = (0,5),   xticks = 0:1:5, label = \"CDF\", \n      xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n      xguidefontsize=18, yguidefontsize=18, linewidth=3,\n      linecolor = \"blue\")","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"#= Hazard function =#\nplot(t -> haz(GeneralizedGamma(0.5, 1.5, 0.75),t),\n     xlabel = \"x\", ylabel = \"Hazard\", title = \"GenGamma distribution\",\n     xlims = (0,15),   xticks = 0:1:15, label = \"\", \n     xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n     xguidefontsize=18, yguidefontsize=18, linewidth=3,\n     linecolor = \"blue\")","category":"page"},{"location":"GenGamma/","page":"Generalised Gamma Distribution","title":"Generalised Gamma Distribution","text":"E. Stacy. A generalization of the gamma distribution. The Annals of Mathematical Statistics 33, 1187–1192 (1962).\n\n\n\n","category":"page"},{"location":"PGW/#Power-Generalised-Weibull-Distribution","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"","category":"section"},{"location":"PGW/#The-Power-Generalised-Weibull-Distribution","page":"Power Generalised Weibull Distribution","title":"The Power Generalised Weibull Distribution","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The Power Generalised Weibull (PGW) distribution [7] is a three-parameter distribution with support on mathbb R_+. The corresponding hazard function can accommodate bathtub, unimodal and monotone (increasing and decreasing) hazard shapes. The PGW distribution has become popular in survival analysis given the tractability of its hazard and survival functions. Other flexible distributions that can account for these hazard shapes are discussed in @rubio:2021 and @jones:2015. ","category":"page"},{"location":"PGW/#Probability-Density-Function","page":"Power Generalised Weibull Distribution","title":"Probability Density Function","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The pdf of the PGW distribution is","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"f(tsigmanugamma) = dfracnugamma sigma^nut^nu-1 left 1 + left(dfractsigmaright)^nuright^left(frac1gamma-1right) expleft 1- left 1 + left(dfractsigmaright)^nuright^frac1gamma\nright","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"where sigma0 is a scale parameter, and nugamma 0 are shape parameters.","category":"page"},{"location":"PGW/#Survival-Function","page":"Power Generalised Weibull Distribution","title":"Survival Function","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The survival function of the PGW distribution is","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"S(tsigmanugamma) = expleft 1- left 1 + left(dfractsigmaright)^nuright^frac1gamma\nright","category":"page"},{"location":"PGW/#Hazard-Function","page":"Power Generalised Weibull Distribution","title":"Hazard Function","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The hazard function of the PGW distribution is","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"h(tsigmanugamma) = dfracnugamma sigma^nut^nu-1 left 1 + left(dfractsigmaright)^nuright^left(frac1gamma-1right)","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The cdf can be obtained as F(tsigmanugamma)=1-S(tsigmanugamma), and the cumulative hazard function as H(tsigmanugamma) = -log S(tsigmanugamma), as usual.","category":"page"},{"location":"PGW/#Quantile-Function","page":"Power Generalised Weibull Distribution","title":"Quantile Function","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The quantile function of the PGW distribution is","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"Q(psigmanugamma) = sigma left left( 1 - log(1-p) right)^gamma - 1 right^frac1nu","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"where pin(01).","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"The following Julia code shows the implementation of the pdf, survival function, hazard function, cumulative hazard function, quantile function, and random number generation associated to the PGW distribution using the Julia package HazReg.jl. Some illustrative examples are also presented.","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"See also: ","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"HazReg.jl Julia Package \nThe Power Generalised Weibull Distribution","category":"page"},{"location":"PGW/#Required-packages","page":"Power Generalised Weibull Distribution","title":"Required packages","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"using Distributions\nusing Random\nusing Plots\nusing StatsBase\nusing HazReg","category":"page"},{"location":"PGW/#Examples","page":"Power Generalised Weibull Distribution","title":"Examples","text":"","category":"section"},{"location":"PGW/#Random-number-generation","page":"Power Generalised Weibull Distribution","title":"Random number generation","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"#= Fix the seed =#\nRandom.seed!(123)\n#= True values of the parameters =#\nD = PowerGeneralizedWeibull(1,3,2) # sigma, nu, gamma\n#= Simulation =#\nsim = rand(D,1000);","category":"page"},{"location":"PGW/#Some-plots","page":"Power Generalised Weibull Distribution","title":"Some plots","text":"","category":"section"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"#= Histogram and probability density function =#\nhistogram(sim, normalize=:pdf, color=:gray, \n          bins = range(0, 5, length=30), label = \"\")\nplot!(t -> pdf(D,t),\n      xlabel = \"x\", ylabel = \"Density\", title = \"PGW distribution\",\n    xlims = (0,5),   xticks = 0:1:5, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"#= Empirical CDF and CDF =#\n\n#= Empirical CDF=#\necdfsim = ecdf(sim)\n\nplot(x -> ecdfsim(x), 0, 5, label = \"ECDF\", linecolor = \"gray\", linewidth=3)\nplot!(t -> cdf(D,t),\n      xlabel = \"x\", ylabel = \"CDF vs. ECDF\", title = \"PGW distribution\",\n    xlims = (0,5),   xticks = 0:1:5, label = \"CDF\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"#= Hazard function =#\nplot(t -> haz(PowerGeneralizedWeibull(0.5, 2, 5),t),\n      xlabel = \"x\", ylabel = \"Hazard\", title = \"PGW distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"PGW/","page":"Power Generalised Weibull Distribution","title":"Power Generalised Weibull Distribution","text":"M. Nikulin and F. Haghighi. On the power generalized Weibull family: model for cancer censored data. Metron – International Journal of Statistics 67, 75–86 (2009).\n\n\n\n","category":"page"},{"location":"OtherHazards/#Some-hazard-functions-in-Julia","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"","category":"section"},{"location":"OtherHazards/#Hazard-and-cumulative-hazard-functions","page":"Some hazard functions in Julia","title":"Hazard and cumulative hazard functions","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"The hazard and the cumulative hazard functions play a crucial role in survival analysis. These functions define the likelihood function in the presence of censored observations. Thus, they are important in many context. For more information about these functions, see Short course on Parametric Survival Analysis .","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"This tutorial contains the implementation of the hazard and cumulative hazard functions for some popular distributions using the Julia package HazReg.jl, such as the LogNormal, LogLogistic, Weibull, and Gamma distributions. ","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"The Julia implementation of other, less common, distributions that are of interest in survival analysis can be found in the Julia package HazReg.jl: HazReg.jl.","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"See also: ","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"HazReg.jl Julia Package ","category":"page"},{"location":"OtherHazards/#Required-packages","page":"Some hazard functions in Julia","title":"Required packages","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"using Distributions\nusing Plots\nusing StatsBase\nusing HazReg","category":"page"},{"location":"OtherHazards/#Examples","page":"Some hazard functions in Julia","title":"Examples","text":"","category":"section"},{"location":"OtherHazards/#LogNormal","page":"Some hazard functions in Julia","title":"LogNormal","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Hazard function =#\nplot(t -> haz(LogNormal(0.5, 1), t),\n      xlabel = \"x\", ylabel = \"Hazard\", title = \"LogNormal distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Cumulative Hazard function =#\nplot(t -> cumhaz(LogNormal(0.5, 1),t),\n      xlabel = \"x\", ylabel = \"Cumulative Hazard\", title = \"LogNormal distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/#LogLogistic","page":"Some hazard functions in Julia","title":"LogLogistic","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Hazard function =#\nplot(t -> haz(LogLogistic(1, 0.5),t),\n      xlabel = \"x\", ylabel = \"Hazard\", title = \"LogLogistic distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Cumulative Hazard function =#\nplot(t -> cumhaz(LogLogistic(1, 0.5),t),\n      xlabel = \"x\", ylabel = \"Cumulative Hazard\", title = \"LogLogistic distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/#Weibull","page":"Some hazard functions in Julia","title":"Weibull","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Weibull function =#\nplot(t -> haz(Weibull(3, 0.5),t),\n      xlabel = \"x\", ylabel = \"Hazard\", title = \"Weibull distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Cumulative Hazard function =#\nplot(t -> cumhaz(Weibull(3, 0.5),t),\n      xlabel = \"x\", ylabel = \"Cumulative Hazard\", title = \"Weibull distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/#Gamma","page":"Some hazard functions in Julia","title":"Gamma","text":"","category":"section"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Weibull function =#\nplot(t -> haz(Gamma(3, 0.5),t),\n      xlabel = \"x\", ylabel = \"Hazard\", title = \"Gamma distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"OtherHazards/","page":"Some hazard functions in Julia","title":"Some hazard functions in Julia","text":"#= Cumulative Hazard function =#\nplot(t -> cumhaz(Gamma(3, 0.5),t),\n      xlabel = \"x\", ylabel = \"Cumulative Hazard\", title = \"Gamma distribution\",\n    xlims = (0,10),   xticks = 0:1:10, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"simGHJulia/#Julia-simGH:-simulating-times-to-event-from-a-general-hazard-structure","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"","category":"section"},{"location":"simGHJulia/#The-simGH-command.","page":"Julia simGH: simulating times to event from a general hazard structure","title":"The simGH command.","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The simGH command from the HazReg.jl Julia package allows one to simulate times to event from the following models:","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"General Hazard (GH) model [1] [2].\nAccelerated Failure Time (AFT) model [3].\nProportional Hazards (PH) model [4].\nAccelerated Hazards (AH) model [5].","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"A description of these hazard models is presented below as well as the available baseline hazards.","category":"page"},{"location":"simGHJulia/#General-Hazard-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"General Hazard model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The GH model is formulated in terms of the hazard structure","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"h(t alpha beta theta bf x) = h_0left(t  exptildebf x^topalpha thetaright) expbf x^topbeta","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"where bf xinmathbb R^p are the covariates that affect the hazard level; tildebf x in mathbb R^q are the covariates the affect the time level (typically tildebf x subset bf x); alpha in mathbb R^q and beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"This hazard structure leads to an identifiable model as long as the baseline hazard is not a hazard associated to a member of the Weibull family of distributions [1]. ","category":"page"},{"location":"simGHJulia/#Accelerated-Failure-Time-(AFT)-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Accelerated Failure Time (AFT) model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The AFT model is formulated in terms of the hazard structure","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"h(t beta theta bf x) = h_0left(t  expbf x^topbeta thetaright) expbf x^topbeta","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"where bf xinmathbb R^p are the available covariates; beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"simGHJulia/#Proportional-Hazards-(PH)-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Proportional Hazards (PH) model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The PH model is formulated in terms of the hazard structure","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"h(t beta theta bf x) = h_0left(t  thetaright) expbf x^topbeta","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"where bf xinmathbb R^p are the available covariates; beta in mathbb R^p are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"simGHJulia/#Accelerated-Hazards-(AH)-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Accelerated Hazards (AH) model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The AH model is formulated in terms of the hazard structure","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"h(t alpha theta tildebf x) = h_0left(t exptildebf x^topalpha thetaright) ","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"where tildebf xinmathbb R^q are the available covariates; alpha in mathbb R^q are the regression coefficients; and theta in Theta is the vector of parameters of the baseline hazard h_0(cdot).","category":"page"},{"location":"simGHJulia/#Available-baseline-hazards","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Available baseline hazards","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"The current version of the simGH command implements the following parametric baseline hazards for the models discussed in the previous section.","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"Power Generalised Weibull (PGW) distribution.\nExponentiated Weibull (EW) distribution.\nGeneralised Gamma (GenGamma) distribuiton.\nGamma (Gamma) distribution.\nLognormal (LogNormal) distribution.\nLog-logistic (LogLogistic) distribution.\nWeibull (Weibull) distribution. (only for AFT, PH, and AH models)","category":"page"},{"location":"simGHJulia/#Illustrative-example:-Julia-code","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Illustrative example: Julia code","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"In this example, we simulate n=1000 times to event from the GH, PH, AFT, and AH models with PGW baseline hazards, using the Julia simGH command from the HazReg package. We censor these samples at a fixed value, and fit the corresponding models using the Julia package HazReg.","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"See also: ","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"HazReg.jl Julia Package ","category":"page"},{"location":"simGHJulia/#PGW-GH-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"PGW-GH model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"# Required packages\nusing HazReg\nusing Distributions\nusing Random\nusing DataFrames\nusing Optim\n\n# Sample size\nn = 10000\n\n# Simulated design matrices\nRandom.seed!(123)\ndist = Normal()\ndes = hcat(rand(dist, n), rand(dist, n))\ndes_t = rand(dist, n)\n\n\n#----------------------------\n# PGW-GH simulation\n#----------------------------\n\n# True parameters\ntheta0 = [0.1,2.0,5.0]\nalpha0 = 0.5\nbeta0 = [-0.5,0.75]\n\n# censoring\ncens = 10\n\n# Data simulation\nsimdat = simGH(seed = 1234, n = n, des = des, des_t = des_t,\n      alpha = alpha0, beta = beta0, \n      hstr = \"GH\", dist = PowerGeneralizedWeibull(theta0...))\n\n# status variable\nstatus = collect(Bool,(simdat .< cens))\n\n# Inducing censoring\nsimdat = min.(simdat, cens)\n\n# Model fit\nOPTPGWGH = GHMLE(init = fill(0.0, 3 + 1 + size(des)[2]), times = simdat,\n            status = status, hstr = \"GH\", dist = PowerGeneralizedWeibull, \n            des = des, des_t = des_t, method = NelderMead(), maxit = 1000)\n\nMLEPGWGH = [exp(OPTPGWGH[1].minimizer[j]) for j in 1:3] \nappend!(MLEPGWGH, OPTPGWGH[1].minimizer[4:end]) \n\n# True parameter values vs. MLE\nCOMP =  hcat(vcat(theta0,alpha0,beta0),MLEPGWGH);  \nCOMP = DataFrame(COMP, :auto);\n \nrename!( COMP, [\"True\", \"MLE\"] );\nprintln(COMP)","category":"page"},{"location":"simGHJulia/#PGW-PH-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"PGW-PH model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"\n# Sample size\nn = 10000\n\n# Simulated design matrices\nRandom.seed!(123)\ndist = Normal()\ndes = hcat(rand(dist, n), rand(dist, n))\n\n\n#----------------------------\n# PGW-PH simulation\n#----------------------------\n\n# True parameters\ntheta0 = [0.1,2.0,5.0]\nbeta0 = [-0.5,0.75]\n\n# censoring\ncens = 10\n\n# Data simulation\nsimdat = simGH(seed = 1234, n = n, des = des, des_t = nothing,\n      alpha = nothing, beta = beta0, \n      hstr = \"PH\", dist = PowerGeneralizedWeibull(theta0...))\n\n# status variable\nstatus = collect(Bool,(simdat .< cens))\n\n# Inducing censoring\nsimdat = min.(simdat, cens)\n\n# Model fit\nOPTPGWPH = GHMLE(init = fill(0.0, 3 + size(des)[2]), times = simdat,\n            status = status, hstr = \"PH\", dist = PowerGeneralizedWeibull, \n            des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\nMLEPGWPH = [exp(OPTPGWPH[1].minimizer[j]) for j in 1:3] \nappend!(MLEPGWPH, OPTPGWPH[1].minimizer[4:end]) \n\n# True parameter values vs. MLE\nCOMP =  hcat(vcat(theta0,beta0),MLEPGWPH);  \nCOMP = DataFrame(COMP, :auto);\n \nrename!( COMP, [\"True\", \"MLE\"] );\nprintln(COMP)","category":"page"},{"location":"simGHJulia/#PGW-AFT-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"PGW-AFT model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"# Sample size\nn = 10000\n\n# Simulated design matrices\nRandom.seed!(123)\ndist = Normal()\ndes = hcat(rand(dist, n), rand(dist, n))\n\n\n#----------------------------\n# PGW-AFT simulation\n#----------------------------\n\n# True parameters\ntheta0 = [0.1,2.0,5.0]\nbeta0 = [-0.5,0.75]\n\n# censoring\ncens = 10\n\n# Data simulation\nsimdat = simGH(seed = 1234, n = n, des = des, des_t = nothing,\n      alpha = nothing, beta = beta0, \n      hstr = \"AFT\", dist = PowerGeneralizedWeibull(theta0...))\n\n# status variable\nstatus = collect(Bool,(simdat .< cens))\n\n# Inducing censoring\nsimdat = min.(simdat, cens)\n\n# Model fit\nOPTPGWAFT = GHMLE(init = fill(0.0, 3 + size(des)[2]), times = simdat,\n            status = status, hstr = \"AFT\", dist = PowerGeneralizedWeibull, \n            des = des, des_t = nothing, method = NelderMead(), maxit = 1000)\n\nMLEPGWAFT = [exp(OPTPGWAFT[1].minimizer[j]) for j in 1:3] \nappend!(MLEPGWAFT, OPTPGWAFT[1].minimizer[4:end]) \n\n# True parameter values vs. MLE\nCOMP =  hcat(vcat(theta0,beta0),MLEPGWAFT);  \nCOMP = DataFrame(COMP, :auto);\n \nrename!( COMP, [\"True\", \"MLE\"] );\nprintln(COMP)","category":"page"},{"location":"simGHJulia/#PGW-AH-model","page":"Julia simGH: simulating times to event from a general hazard structure","title":"PGW-AH model","text":"","category":"section"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"\n# Sample size\nn = 10000\n\n# Simulated design matrices\nRandom.seed!(123)\ndist = Normal()\ndes_t = hcat(rand(dist, n), rand(dist, n))\n\n\n#----------------------------\n# PGW-AH simulation\n#----------------------------\n\n# True parameters\ntheta0 = [0.1,2.0,5.0]\nalpha0 = [-0.5,0.75]\n\n# censoring\ncens = 10\n\n# Data simulation\nsimdat = simGH(seed = 1234, n = n, des = nothing, des_t = des_t,\n      alpha = alpha0, beta = nothing, \n      hstr = \"AH\", dist = PowerGeneralizedWeibull(theta0...))\n\n# status variable\nstatus = collect(Bool,(simdat .< cens))\n\n# Inducing censoring\nsimdat = min.(simdat, cens)\n\n# Model fit\nOPTPGWAH = GHMLE(init = fill(0.0, 3 + size(des)[2]), times = simdat,\n            status = status, hstr = \"AH\", dist = PowerGeneralizedWeibull, \n            des = nothing, des_t = des_t, method = NelderMead(), maxit = 1000)\n\nMLEPGWAH = [exp(OPTPGWAH[1].minimizer[j]) for j in 1:3] \nappend!(MLEPGWAH, OPTPGWAH[1].minimizer[4:end]) \n\n# True parameter values vs. MLE\nCOMP =  hcat(vcat(theta0,beta0),MLEPGWAH);  \nCOMP = DataFrame(COMP, :auto);\n \nrename!( COMP, [\"True\", \"MLE\"] );\nprintln(COMP)","category":"page"},{"location":"simGHJulia/","page":"Julia simGH: simulating times to event from a general hazard structure","title":"Julia simGH: simulating times to event from a general hazard structure","text":"Y. Chen and N. Jewell. On a general class of semiparametric hazards regression models. Biometrika 88, 687–702 (2001).\n\n\n\nF. Rubio, L. Remontet, N. Jewell and A. Belot. On a general structure for hazard-based regression models: an application to population-based cancer research. Statistical Methods in Medical Research 28, 2404–2417 (2019).\n\n\n\nJ. Kalbfleisch and R. Prentice. The statistical analysis of failure time data (John Wiley & Sons, 2011).\n\n\n\nD. Cox. Regression models and life-tables. Journal of the Royal Statistical Society: Series B (Methodological) 34, 187–202 (1972).\n\n\n\nY. Chen and M. Wang. Analysis of accelerated hazards models. Journal of the American Statistical Association 95, 608–618 (2000).\n\n\n\n","category":"page"},{"location":"EW/#Exponentiated-Weibull-Distribution","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"","category":"section"},{"location":"EW/#The-Exponentiated-Weibull-distribution","page":"Exponentiated Weibull Distribution","title":"The Exponentiated Weibull distribution","text":"","category":"section"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"The Exponentiated Weibull distribution is a generalisation of the Weibull distribution which is obtained by exponentiating the Weibull cumulative distribution function. This simple transformation adds a second shape parameter that, interestingly, induces a lot of flexibility on the hazard function. The hazard function of the Exponentiated Weibull distribution can capture the basic shapes: constant, increasing, decreasing, bathtub, and unimodal, making it appealing for survival models.","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"The probability density function and cumulative distribution function of the Exponentiated Weibull distribution are respectively given by:","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"beginsplit\nf_EW(t) =  alpha dfrackappalambda left(dfractlambdaright)^kappa-1 left1-expleft-left(dfractlambdaright)^kapparightright^alpha-1 expleft-left(dfractlambdaright)^kapparight \nF_EW(t) = left1-expleft-left(dfractlambdaright)^kapparightright^alpha\nendsplit","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"where t0, alpha0, lambda0, and kappa0. The parameter lambda is a scale parameter, kappa is a shape parameter, and alpha is the power (shape) parameter. ","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"The following Julia code contains an implementation of the probability density function, cumulative distribution function, quantile function, random number generation, hazard function, and cumulative hazard function of the Exponentiated Weibull distribution using the corresponding Julia package HazReg.jl. Some illustrative examples are also presented.","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"See also: ","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"HazReg.jl Julia Package \nThe Exponentiated Weibull distribution","category":"page"},{"location":"EW/#Required-packages","page":"Exponentiated Weibull Distribution","title":"Required packages","text":"","category":"section"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"using Distributions\nusing Random\nusing Plots\nusing StatsBase\nusing HazReg","category":"page"},{"location":"EW/#Examples","page":"Exponentiated Weibull Distribution","title":"Examples","text":"","category":"section"},{"location":"EW/#Random-number-generation","page":"Exponentiated Weibull Distribution","title":"Random number generation","text":"","category":"section"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"#= Fix the seed =#\nRandom.seed!(123)\n#= True values of the parameters =#\nD = ExponentiatedWeibull(1,3,2) # sigma, nu, gamma\n#= Simulation =#\nsim = rand(D,1000);","category":"page"},{"location":"EW/#Some-plots","page":"Exponentiated Weibull Distribution","title":"Some plots","text":"","category":"section"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"#= Histogram and probability density function =#\nhistogram(sim, normalize=:pdf, color=:gray, \n          bins = range(0, 3, length=30), label = \"\")\nplot!(t -> pdf(D,t),\n      xlabel = \"x\", ylabel = \"Density\", title = \"EW distribution\",\n    xlims = (0,3),   xticks = 0:1:3, label = \"\", \n    xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n    xguidefontsize=18, yguidefontsize=18, linewidth=3,\n    linecolor = \"blue\")","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"#= Empirical CDF and CDF =#\n\n#= Empirical CDF=#\necdfsim = ecdf(sim)\n\nplot(x -> ecdfsim(x), 0, 3, label = \"ECDF\", linecolor = \"gray\", linewidth=3)\nplot!(t -> cdf(D,t),\n      xlabel = \"x\", ylabel = \"CDF vs. ECDF\", title = \"EW distribution\",\n      xlims = (0,3),   xticks = 0:1:3, label = \"CDF\", \n      xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n      xguidefontsize=18, yguidefontsize=18, linewidth=3,\n      linecolor = \"blue\")","category":"page"},{"location":"EW/","page":"Exponentiated Weibull Distribution","title":"Exponentiated Weibull Distribution","text":"#= Hazard function =#\nplot(t -> haz(ExponentiatedWeibull(0.25, 0.5, 5),t),\n     xlabel = \"x\", ylabel = \"Hazard\", title = \"EW distribution\",\n     xlims = (0,10),   xticks = 0:1:10, label = \"\", \n     xtickfont = font(16, \"Courier\"),  ytickfont = font(16, \"Courier\"),\n     xguidefontsize=18, yguidefontsize=18, linewidth=3,\n     linecolor = \"blue\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HazReg","category":"page"},{"location":"#HazReg.jl","page":"Home","title":"HazReg.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All docstrings from the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HazReg]","category":"page"},{"location":"#HazReg.ExponentiatedWeibull","page":"Home","title":"HazReg.ExponentiatedWeibull","text":"ExponentiatedWeibull(sigma,nu,gamma)\n\nThe ExponentiatedWeibull distribution with scale sigma, shape nu and second shape gamma has probability density function \n\nf(x parameters) = \n\nMore details and examples of usage could be provided in this docstring.\n\nMaybe this distribution could simply be constructed from a transformation of the original Weibull ? \n\nReferences: \n\nLink to my reference so that people understand what it is \n\n\n\n\n\n","category":"type"},{"location":"#HazReg.GeneralizedGamma","page":"Home","title":"HazReg.GeneralizedGamma","text":"GeneralizedGamma(sigma,nu,gamma)\n\nThe GeneralizedGamma distribution with scale sigma, shape nu and second shape gamma has probability density function \n\nf(x parameters) = \n\nMore details and examples of usage could be provided in this docstring.\n\nMaybe this distribution could simply be constructed from a transformation of the original Weibull ? \n\nReferences: \n\nLink to my reference so that people understand what it is \n\n\n\n\n\n","category":"type"},{"location":"#HazReg.LogLogistic","page":"Home","title":"HazReg.LogLogistic","text":"LogLogistic(mu,sigma)\n\nTo be described... \n\nf(x parameters) = \n\n\n\n\n\n","category":"type"},{"location":"#HazReg.PowerGeneralizedWeibull","page":"Home","title":"HazReg.PowerGeneralizedWeibull","text":"PowerGeneralizedWeibull(sigma,nu,gamma)\n\nThe PowerGeneralizedWeibull distribution with scale sigma, shape nu and second shape gamma has probability density function \n\nf(x parameters) = \n\nMore details and examples of usage could be provided in this docstring.\n\nMaybe this distribution could simply be constructed from a transformation of the original Weibull ? \n\nReferences: \n\nLink to my reference so that people understand what it is \n\n\n\n\n\n","category":"type"},{"location":"#HazReg.GHMLE-Union{Tuple{}, Tuple{T}} where T<:Distributions.Distribution{Distributions.Univariate, Distributions.Continuous}","page":"Home","title":"HazReg.GHMLE","text":"GHMLE(...)\n\nMaximum likelihood estimation in General Hazards models using  several parametric baseline hazards\n\nDocs to rewrite....\n\ninit : initial point for optimisation step under the parameterisation  (log(scale), log(shape1), log(shape2), alpha, beta) for scale-shape1-shape2 models or  (mu, log(scale), alpha, beta) for log-location scale models.\n\ntimes : times to event\n\nstatus: vital status indicators (true or 1 = observed, false or 0 = censored)\n\nhstr: hazard structure.  No covariates (\"baseline\"), AFT model (\"AFT\"), PH model (\"PH\"),        AH model (\"AH\"), GH model (\"GH\").\n\ndist: baseline hazard distribution, on the form of a type <: Distributions.ContinuousUnivariateDistribution. Tested with:     - LogNormal     - LogLogistic     - Weibull     - Gamma     - ExponentiatedWeibull     - GeneralizedGamma     - PowerGeneralizedWeibull.\n\ndes: design matrix for hazard-level effects\n\ndes_t: design matrix for time-level effects (it is recommended not to use splines here)\n\nmethod: one of NelderMead(), Newton(), LBFGS(), ConjugateGradient() or GradientDescent() or any other method taken by Optim.optimize().\n\nmaxit: maximum number of iterations of the optimization routine. \n\nReferences: \n\nLink to my reference so that people understand what it is\n\n\n\n\n\n","category":"method"},{"location":"#HazReg.simGH-Tuple{}","page":"Home","title":"HazReg.simGH","text":"simGH(...)\n\n\nDetails...\n\nDocs to rewrite....\n\n\n\nsimGH function: Function to simulate times to event from a model with AH, AFT, PH, GH structures for different parametric baseline hazards. Distributions: LogNormal, LogLogistic, GenGamma, GGamma, Weibull, PGW, EW. See: https://github.com/FJRubio67/HazReg ––––––––––––––––––––––––––––––––––––––––––––––––– =#\n\n#= seed  : seed for simulation n : sample size (number of individuals) beta  : regression parameters multiplying the hazard for the GH model         or the regression parameters for AFT and PH models alpha  : regression parameters multiplying the time scale for the GH model         or the regression parameters for the AH model des : Design matrix for the GH model (hazard scale)       or design matrix for AFT and PH models des_t : Design matrix for the GH model (time scale)        or design matrix for the AH model hstr  : hazard structure (AH, AFT, PH, GH) dist: distribution passed as an already instanciated distribution from Distributions.jl baseline  : baseline hazard distribution\n\nReturns a vector containing the simulated times to event\n\nReferences: \n\nLink to my reference so that people understand what it is \n\n\n\n\n\n","category":"method"}]
}
